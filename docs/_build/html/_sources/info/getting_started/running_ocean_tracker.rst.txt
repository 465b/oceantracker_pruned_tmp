#####################
Running OceanTracker
#####################

============================
Ways to run
============================
OceanTracker can be run in two ways.

#. From command line using  json or yaml parameterfile eg.

    ``python run_oceantracker.py --param_file my_params.json``

    or

    ``python run_oceantracker.py --param_file my_params.yaml``

    Then write code to do post processing and/or plotting, using oceantracker.post_processing.* or with user's own tools.

#. From python code

    * by building a parameter dictionary in code
    * passing parameter dictionary  to main.run() method
    * adding optional code for  post processing and/or plotting using oceantracker.post_processing.*




.. include:: ../demos/minimal_example.rst

============================
Run from parameter file
============================

Using run_oceantracker.py, eg.

``python run_oceantracker.py --param_file YAMLinputFiles\demo01_plot_tracks.yaml --input_dir demohindcast --root_output_dir output\demo01 --duration 3600``

Command line parameters of runOT.py can override input and output dirs in the parameter file. With usage

.. code-block:: python

    python run_oceantracker.py --param_file  ./demos/demo02_animation.json   ( + options below)

    usage: run_oceantracker.py [-h] [--param_file PARAM_FILE]
                           [--input_dir INPUT_DIR]
                           [--root_output_dir ROOT_OUTPUT_DIR]
                           [--processors PROCESSORS] [--replicates REPLICATES]
                           [--duration DURATION] [--cases CASES] [-debug]

    optional arguments:
      -h, --help            show this help message and exit
      --param_file PARAM_FILE
                            json or yaml file of input parameters
      --input_dir INPUT_DIR
                            overrides dir for hindcast files given in param file
      --root_output_dir ROOT_OUTPUT_DIR
                            overrides root output dir given in param file
      --processors PROCESSORS
                            overrides number of processors in param file
      --replicates REPLICATES
                            overrides number of case replicates given in param
                            file
      --duration DURATION   in seconds, overrides model duration in seconds of all
                            of cases, useful in testing
      --cases CASES         only runs first "cases" of the case_list, useful in
                            testing
      -debug                gives better error information, but runs slower, eg
                            checks Numba array bounds

JSON file
---------------------------

Example   demos\\JSONinputFiles\\demo01_plot_tracks.json

.. code-block:: python

    {'shared_params' :{'output_file_base' :'demo01_plot_tracks',
                       'root_output_dir': 'output', 'debug': True},
     'reader':  { 'input_dir': 'demohindcast',  'file_mask': 'demoHindcast2D*.nc',
                    'water_velocity_map': {'u' : 'east_vel', 'v' : 'north_vel'},
                    'dimension_map': {'time': 'time'},
                    'grid_map': {   'time': 'time_sec', 'x': 'east','y': 'north',
                                    'triangles': 'tri'},
                    'time_buffer_size': 24, 'isodate_of_hindcast_time_zero': '2017-01-01'} ,
     'base_case_params' : {
        'run_params' : {'dispersion_on' : True},
        'dispersion': {'A_H': 0.1},
        'solver': {'n_sub_steps': 26},
        'particle_release_groups': [ {'points': [[1594500, 5483000]], 'pulse_size': 200, 'release_interval': 0}],
        'particle_properties': [       {'name': 'Oxygen', 'class_name': 'oceantracker.particle_properties.age_decay.AgeDecay', 'decay_time_scale': 1. * 3600 * 24,'initial_value' : 20.},
                                            {'class_name': 'oceantracker.particle_properties.distance_travelled.DistanceTravelled'}
                                            ],
                            }}

YAML file
---------------------------

Example   demos\\YAMLinputFiles\demo55_SCHISM_3D_fall_velocity.yaml, where indenting with spaces (not tabs) nests dictionaries within dictionaries. So above dictionary becomes like

.. code-block:: python

    base_case_params:
      dispersion:
        A_H: 0.2
        A_V: 0.001
      event_loggers:
      - class_name: oceantracker.event_loggers.log_polygon_entry_and_exit.LogPolygonEntryAndExit
        particle_prop_to_write_list:
        - ID
        - x
        - IDrelease_group
        - status
        - age
        polygon_list:
        - points:
          - - 1592682.1237
            - 5489972.7479
          - - 1593604.1667
            - 5490275.5488
          - - 1593886.4247
            - 5489464.0424
          - - 1592917.3387
            - 5489000.0
          - - 1592300.0
            - 5489000.0
          - - 1592682.1237
            - 5489972.7479
          user_polygon_name: A
        - points:
          - - 1597682.1237
            - 5489972.7479
          - - 1598604.1667
            - 5490275.5488
          - - 1598886.4247
            - 5489464.0424
          - - 1597917.3387
            - 5487000
          - - 1597300
            - 5487000
          - - 1597682.1237
            - 5489972.7479
          user_polygon_name: B
      particle_properties:
      - class_name: oceantracker.particle_properties.age_decay.AgeDecay
        decay_time_scale: 86400.0
      particle_release_groups:
      - points:
        - - 1594500
          - 5487000
          - -1
        - - 1594500
          - 5483000
          - -1
        - - 1598000
          - 5486100
          - -1
        pulse_size: 10
        release_interval: 3600
      - class_name: oceantracker.particle_release_groups.polygon_release.PolygonRelease
        points:
        - - 1597682.1237
          - 5489972.7479
        - - 1598604.1667
          - 5490275.5488
        - - 1598886.4247
          - 5489464.0424
        - - 1597917.3387
          - 5489000
        - - 1597300
          - 5489000
        - - 1597682.1237
          - 5489972.7479
        pulse_size: 10
        release_interval: 3600
        z_max: -4
        z_min: -2
      particle_statistics:
      - calculation_interval: 3600
        class_name: oceantracker.particle_statistics.gridded_statistics.GriddedStats2D_timeBased
        grid_size:
        - 120
        - 121
        particle_property_list:
        - water_depth
      run_params: {}
      solver:
        n_sub_steps: 6
      velocity_modifiers:
      - class_name: oceantracker.velocity_modifiers.terminal_velocity.AddTerminalVelocity
        mean: -0.0005
    reader:
      class_name: oceantracker.reader.schism_reader.SCHSIMreaderNCDF
      depth_average: false
      field_variables:
        water_temperature: temp
      field_variables_to_depth_average:
      - water_velocity
      - water_depth
      - salt
      - water_temperature
      file_mask: demoHindcastSchism3D.nc
      input_dir: E:\H_Local_drive\ParticleTracking\oceantracker02\demos\demohindcast
    shared_params:
      debug: true
      output_file_base: demo55_SCHISM_3D_fall_velocity
      root_output_dir: E:\H_Local_drive\ParticleTracking\oceantracker02\demos\output

==============
Run from code
==============

eg. demos.runOT_from_code_demo.py.

.. code-block:: python

    # run oceantracker direct from code from dictionary built in code
    # make polygons staggered to south west, by appending polygon release groups
    import numpy as np
    from oceantracker.main import run

    params = {
        'shared_params': {'output_file_base': 'demo1000_runFromCodeDemo',
                          'root_output_dir': 'output', 'debug': True,
                          'backtracking': False},
        'reader': {"class_name": 'oceantracker.reader.generic_unstructured_reader.generic_unstructured_reader',
                   'file_mask': 'demoHindcast2D*.nc',
                   'input_dir': 'demohindcast',
                   'search_sub_dirs': True,
                   'field_variables': {'water_temperature': 'temp'},
                  'time_buffer_size': 24},
        'base_case_params': {
            'run_params': {},
            'dispersion': {'A_H': 0.1},
            'solver': {'n_sub_steps': 26},
            'particle_release_groups': [],
        }
    }

    poly_points = np.asarray([[1597682.1237, 5489972.7479],
                              [1598604.1667, 5490275.5488],
                              [1598886.4247, 5489464.0424],
                              [1597917.3387, 5489000],
                              [1597300, 5489000], [1597682.1237, 5489972.7479]])

    # make polygons staggered to south west, by appending polygon release groups
    for n in range(4):
        points = poly_points + np.asarray([[-1050 * n, -2100 * n]])
        params['base_case_params']['particle_release_groups'].append({'class_name': 'oceantracker.particle_release_groups.polygon_release.PolygonRelease',
                                                                      'points': points.tolist(), 'pulse_size': 10, 'release_interval': 2 * 3600})

    runInfo_file_name = run(params)

    plot_tracks.animate_particles(runInfo_file_name, axes=[1590800, 1601800, 5478700, 5491200],
                                  title='Run from code demo, staggered polygons')



